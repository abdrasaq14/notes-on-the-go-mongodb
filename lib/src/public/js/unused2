// const path = require('node:path')

// const mydpPath = path.resolve(__dirname, "../../", "usersAndNote.db");
// const sqlite3 = require("sqlite3").verbose();
// const db = new sqlite3.Database(
//   mydpPath,
//   sqlite3.OPEN_READWRITE,
//   (err) => {
//     if (err) return err;
//   }
// );




// async function fetchDataForNoteId(noteId) {
//     const objectData = {};
//   const databaseDetail = await new Promise((resolve, reject) => {
//     const sql = 'SELECT * FROM Notes WHERE NoteCode = ?';

//     db.get(sql, [noteId], (err, row) => {
//       if (err) {
//         reject(err);
//       } else {
//         resolve(Object.assign(objectData, row));
//       }

      
//     });
//   })
//   return objectData
// }

// async function main(){
// const result = await fetchDataForNoteId('database8')
// console.log(result)
// }
// main()


// const path = require('node:path')
// const mydpPath = path.resolve(__dirname, "../../", "usersAndNote.db");
// const sqlite3 = require("sqlite3").verbose();
// const db = new sqlite3.Database(
//   mydpPath,
//   sqlite3.OPEN_READONLY,
//   (err) => {
//     if (err) return err;
//   }
// );


// document.addEventListener("DOMContentLoaded", () => {
//     const editBtn = document.querySelectorAll(".edit-notes");
//     const eachPop = document.getElementById("each-note-display");
//     const addNewNoteBtn = document.getElementById("add-new-notes");
//     const newNotePop = document.getElementById("add-new-note-pop-up");
  
//     editBtn.forEach((item) => {
//       item.addEventListener("click", displayMyPop);
//     });
  
//     addNewNoteBtn.addEventListener("click", displayNewNote);
  
//     // Closing the edit note pop up
//     let close_btn = document.querySelectorAll(".cancel-btn");
//     close_btn.forEach((btn) => {
//       btn.addEventListener("click", closePopup);
//     });
  
//     // Closing the new note pop up
//     let newNoteCloseBtn = document.querySelectorAll(".cancel-btn");
//     newNoteCloseBtn.forEach((btn) => {
//       btn.addEventListener("click", closeNewNotePopup);
//     });
  
//     async function fetchDataForNoteId(noteId) {
//       const path = require('node:path')
//       const mydpPath = path.resolve(__dirname, "../../", "usersAndNote.db");
//       const sqlite3 = require("sqlite3").verbose();
//       const db = new sqlite3.Database(
//         mydpPath,
//         sqlite3.OPEN_READONLY,
//         (err) => {
//           if (err) return err;
//         }
//       );
//       const objectData = {};
//       return await new Promise((resolve, reject) => {
//         const sql = 'SELECT * FROM Notes WHERE NoteCode = ?';
  
//         db.get(sql, [noteId], (err, row) => {
//           if (err) {
//             reject(err);
//           } else {
//             resolve(Object.assign(objectData, row));
//           }
//         });
//       });
//     }
  
//     function editNote(noteData) {
//       eachPop.style.display = "flex";
//       eachPop.style.flexDirection = "column";
//       eachPop.style.alignItems = "center";
//       eachPop.style.justifyContent = "center";
  
//       document.getElementById("title").value = noteData.Title;
//       document.getElementById("description").value = noteData.Description;
//       document.getElementById("dueDate").value = noteData.DueDate;
//       document.getElementById("status").value = noteData.Status;
//     }
  
//     function displayMyPop(e) {
//       if (e.target.classList.contains("edit-notes")) {
//         const noteId = e.target.getAttribute("data-id");
  
//         fetchDataForNoteId(noteId)
//           .then((noteData) => {
//             editNote(noteData);
//           })
//           .catch((error) => {
//             console.error(error);
//           });
//       }
//     }
  
//     function displayNewNote() {
//       newNotePop.style.display = "flex";
//       newNotePop.style.flexDirection = "column";
//       newNotePop.style.alignItems = "center";
//       newNotePop.style.justifyContent = "center";
//     }
  
//     function closePopup() {
//       eachPop.style.display = "none";
//     }
  
//     function closeNewNotePopup() {
//       newNotePop.style.display = "none";
//     }
  
//     // Code to send a POST request to the delete route
//     async function deleteNote(noteId) {
//       try {
//         const token = localStorage.getItem("mytoken");
  
//         const response = await fetch("http://localhost:3000/notes/dashboard/delete-note", {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//           },
//           body: JSON.stringify({ noteId }),
//         });
  
//         const result = await response.json();
//         console.log(result);
  
//         location.reload();
//       } catch (error) {
//         console.error("Error deleting note:", error);
//       }
//     }
//   });
  

/*
doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel='stylesheet', href='../stylesheets/dashboard.css')
    link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css" integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA==" crossorigin="anonymous" referrerpolicy="no-referrer" )
    title Notes page
  body#body
    header#header
      .left-icon
        img(src="../img/note-icon.png", alt="", srcset="")
        a.left-icon-text(href='/notes/dashboard') NOTES ON THE GO! 
      .search-icon-wrapper
        //- i.fa-solid.fa-magnifying-glass.search-icon
        input.search-input(type='text', placeholder='Search Note', class="search-input")
      .right-btn-wrapper
        a(href="/notes", class="sign-out-text") Sign out 
          | 
          span.sign-out-wrapper 
            i.fa-solid.fa-right-from-bracket.sign-out-icon
          i.fa-solid.fa-moon.night-mode(id="night-mode")

    .body-wrapper   
      each user of queryUserTable
        h1.welcome-text Hi, 
          | 
          span.user-name-text #{user.Full_name}
          |
          span.exclamation !
      
      if notes.length == 0
        p.no-note-length You note list is empty, kindly click on the button below to create one.
      
      button#add-new-notes Click to add new note
      
      if deletedNote
        p.deleted-note-para #{deletedNote}
      else if deletingError 
        p.error-deleting #{deletingError}
        
      else if notes.length >= 1 
        .existing-note-wrapper 
          h1.existing-note Your Notes
          img(src="../img/curve.png", alt="", class="existing-note-img", srcset="")
          ul
            each note in notes
              li
                h2 #{note.Title}
                p 
                  strong Description: 
                    | #{note.Description}          
                p 
                  strong Status: 
                    | #{note.Status}
                p 
                  strong Due Date: 
                    | #{note.DueDate}
                p 
                  strong Note Code: 
                    | #{note.NoteCode}              
                
                div.edit-and-delete-button-wrapper    
                  button.edit-notes(data-id=note.NoteCode) Edit Note
                  button.delete-note(onclick=`deleteNote('${note.NoteCode}')`) Delete Note

          div#each-note-display
            form(action='/notes/dashboard/edit', method='post', enctype="application/x-www-form-urlencoded")
               
              input(type='hidden', id='noteId', name='noteId', value='')
              label(for='title') Title:
              input(type='text', id='title', name='title', value='', required)

              label(for='description') Description:
              input(type='text', id='description', name='description', value='')

              label(for='dueDate') Due Date:
              input(type='text', id='dueDate', name='dueDate', value='')

              label(for='status') Status:
              input(type='text', id='status', name='status', value='', required)

              div.button-wrapper    
                button.submit-btn(type='submit') Save Changes
                button.cancel-btn Cancel Edit

    div#add-new-note-pop-up
      form(action='/notes/dashboard/add-new-note', method='post', enctype="application/x-www-form-urlencoded")
        //- Populate the input fields with note data
        label(for='title') Title:
        input(type='text', id='title', name='Title', required, placeholder='Enter the note title here')

        label(for='description') Description:
        input(type='text', id='description', name='Description', placeholder='Enter the note description here')

        label(for='dueDate') Due Date:
        input(type='text', id='dueDate', name='DueDate', placeholder='Enter the due date e.g 24th of August, 2023')

        label(for='status') Status:
        input(type='text', id='status', name='Status', required, placeholder='Enter the note status, e.g pending, done')

        div.button-wrapper    
          button.submit-btn(type='submit') Save note
          button.cancel-btn(onclick='toggleAddNewNotePopUp()') Cancel
    script.
      const notes = !{JSON.stringify(notes)};
      const editBtns = document.querySelectorAll(".edit-notes");

      editBtns.forEach((editBtn) => {
        editBtn.addEventListener("click", displayMyPop);
      });

      function displayMyPop(e) {
        if (e.target.classList.contains('edit-notes')) {
          const noteId = e.target.getAttribute('data-id');
          const clickedNote = notes.find(note => note.NoteCode === noteId);
          editNote(clickedNote);
        }
      }
        eachPop.style.display = "flex";
        eachPop.style.flexDirection = "column";
        eachPop.style.alignItems = "center";
        eachPop.style.justifyContent = "center";
      function editNote(note) {
        const eachPop = document.getElementById("each-note-display");
        eachPop

 */