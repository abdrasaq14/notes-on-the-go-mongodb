doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    link(rel='stylesheet', href='../stylesheets/dashboard.css')
    title Notes page
  body 
    h1 Notes
    button#add-new-notes Add New Note
    if deletedNote
        p.deleted-note-para #{deletedNote}
    else if deletingError 
        p.error-deleting #{deletingError}
    ul 
      each note in notes 
        li
          h2 #{note.Title}
          p 
            strong Description: 
              | #{note.Description}          
          p 
            strong Status: 
              | #{note.Status}
          p 
            strong Due Date: 
              | #{note.DueDate}
          p 
            strong Note Code: 
              | #{note.NoteCode}              
          
          div.edit-and-delete-button-wrapper    
                button.edit-notes(data-id=note.NoteId) Edit Note
                button.delete-note(onclick=`deleteNote('${note.NoteCode}')`) Delete Note

        div#each-note-display
            form(action='/notes/dashboard/edit', method='post', enctype="application/x-www-form-urlencoded")
                //- Populate the input fields with note data
                input(type='hidden', id='noteId', name='noteId', value=note.NoteId)
                label(for='title') Title:
                input(type='text', id='title', name='title', value=note.Title, required)

                label(for='description') Description:
                input(type='text', id='description', name='description', value=note.Description)

                label(for='dueDate') Due Date:
                input(type='text', id='dueDate', name='dueDate', value=note.DueDate)

                label(for='status') Status:
                input(type='text', id='status', name='status', value=note.Status, required)

                div.button-wrapper    
                    button.submit-btn(type='submit') Save Changes
                    button.cancel-btn Cancel Edit
        
        div#add-new-note-pop-up
            form(action='/notes/dashboard/add-new-note', method='post', enctype="application/x-www-form-urlencoded")
                //- Populate the input fields with note data
                label(for='title') Title:
                input(type='text', id='title', name='Title', required)

                label(for='description') Description:
                input(type='text', id='description', name='Description')

                label(for='dueDate') Due Date:
                input(type='text', id='dueDate', name='DueDate')

                label(for='status') Status:
                input(type='text', id='status', name='Status', required)

                div.button-wrapper    
                    button.submit-btn(type='submit') Save Changes
                    button.cancel-btn Cancel Edit
 
  script(src="../js/dashboard.js")

      let noteCodeFromId = '';
      editButtons.forEach(button => {
        button.addEventListener('click', function () {
          const noteId = button.getAttribute('data-id');
          noteCodeFromId += noteId
          const clickedNote = notes.find(note => note.NoteCode === noteId);

          // Populate form fields with note details
          editTitleInput.value = clickedNote.Title;
          editDescriptionInput.value = clickedNote.Description;
          editDueDateInput.value = clickedNote.DueDate;
          editStatusInput.value = clickedNote.Status;

          // Display the popup
          editPopup.style.display = 'flex';
        });
      });

          async function updateNote() {
      // Implement the logic to update the note in the database
      const updatedNote = {
        Title: document.getElementById('edit-title').value,
        Description: document.getElementById('edit-description').value,
        DueDate: document.getElementById('edit-dueDate').value,
        Status: document.getElementById('edit-status').value,
      };

      // Perform the update operation (e.g., using fetch or AJAX)
      await updateNoteInDatabase(updatedNote);

      // Close the popup after updating
      document.getElementById('edit-popup').style.display = 'none';
    }
    // Function to update the note in the database (simulated)
    async function updateNoteInDatabase(updatedNote) {
      try {
        const token = localStorage.getItem('mytoken'); // Use the appropriate method to retrieve the token
        const idFromAttribute = noteCodeFromId
        const response = await fetch('http://localhost:3000/notes/dashboard/edit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`, // Include the token in the headers
          },
          body: JSON.stringify({ idFromAttribute, updatedNote }), // Include NoteId in the request body
        });

        const result = await response.json();
        console.log(result)

      } catch (error) {
        console.error('Error updating note:', error);
      }
    }

    // closing the edit note pop up
    let closeBtn = document.querySelectorAll(".cancel-btn");
    for (let i = 0; i < closeBtn.length; i++) {
      closeBtn[i].addEventListener("click", closePopup);
    }

    function closePopup() {
      document.getElementById("each-note-display").style.display = "none";
    }